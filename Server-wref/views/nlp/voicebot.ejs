<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="stylesheet" href="../../css/voicebot.css" />
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.1/dist/css/bootstrap.min.css" rel="stylesheet" />
    <link
      rel="stylesheet"
      href="https://use.fontawesome.com/releases/v5.15.4/css/all.css"
      integrity="sha384-DyZ88mC6Up2uqS4h/KRgHuoeGwBcD4Ng9SiP4dIRy0EXTlnuz47vAwmeGwVChigm"
      crossorigin="anonymous"
    />
    <title>Document</title>
  </head>
  <body class="p-3">
    <%- include('./header.ejs') %>
    <h2 class="text-center">Voice Bot</h2>
    <div class="container-voicebot">
      <button id="speech" class="btn-voicebot m-left type2">
      <div class="pulse-ring "></div>
      <i class="fa fa-microphone" aria-hidden="true"></i>
    </div>
    <div class="container-voicebot" style="width: 100%;">
      <div id="content-message" style="width: 500px;">
       
      </div>
    </div>
    <script
      src="https://code.jquery.com/jquery-3.6.0.js"
      integrity="sha256-H+K7U5CnXl1h5ywQfKtSj8PCmoN9aaq30gDh27Xc0jk="
      crossorigin="anonymous"
    ></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.1/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://code.responsivevoice.org/responsivevoice.js?key=FKR8sFsn"></script>
    <script>
      let entity;
      let oldIntent;
      let repeat;
      function hanldeMessage(messClient) {
        // socket.emit('client-send', mess.val());
        $.ajax({
          method: 'POST',
          url: '/api/bot/message',
          data: {
            message: messClient,
            entity,
            oldIntent,
            repeat: repeat,
          },
        }).done(function (res) {
          const data = res.data;
          console.log(data);
          console.log(data.repeat);
          entity = data.entity ? data.entity : null;
          oldIntent = data.oldIntent ? data.oldIntent : null;
          repeat = Number.isInteger(data.repeat) ? data.repeat : null;
          console.log(repeat);
          switch (data.type) {
            case 'text':
              textToSpeed(data.message, showText(data.message));
              break;
            case 'data':
              textToSpeed(`${data.message}. ${dataToMess(data.data)}`, `${data.message}<br>${dataToMess(data.data)}`);
              break;
            default:
              break;
          }
        });
      }

      function dataToMess(data) {
        let html = '';
        for (var property in data) {
          name = property;
          value = data[property];
          html = html + ` ${name}: ${value}. `;
        }
        return html;
      }

      function showText(text) {
        let a;
        a = text.replaceAll('\n', '<br>');
        a = text.replaceAll('\\n', '<br>');
        return a;
      }
      // <!-- voice bot -->
      class SpeechRecognitionApi {
        constructor(options) {
          const SpeechToText = window.speechRecognition || window.webkitSpeechRecognition;
          this.speechApi = new SpeechToText();
          this.speechApi.lang = 'vi-VN';
          this.speechApi.continuous = true;
          this.speechApi.interimResults = false;
          this.output = options.output ? options.output : document.createElement('div');
          console.log(this.output);
          this.speechApi.onresult = (event) => {
            console.log(event);
            var resultIndex = event.resultIndex;
            var transcript = event.results[resultIndex][0].transcript;

            console.log('transcript>>', transcript);
            console.log('this.output>> ', this.output);
            this.output.textContent = transcript;
            
            this.stop();
            hanldeMessage(transcript);
            appendMessage(transcript, 'TÃ´i')
          };

          this.speechApi.onvoiceschanged = (event) => {
            console.log(event);
          }
        }
        init() {
          this.speechApi.start();
        }
        stop() {
          $('.pulse-ring').removeClass('active');
          this.speechApi.stop();
        }
      }

      function textToSpeed(text, textShow) {
        // const lang = 'vi-VN';
        // const speech = new SpeechSynthesisUtterance();
        // const voices = window.speechSynthesis.getVoices();
        // console.log(voices);
        // speech.voice = voices.filter((voice) => voice.lang == lang)[0];
        // console.log(speech);
        // console.log(speech.voice);
        // speech.lang = lang;
        // speech.text = text;
        // window.speechSynthesis.speak(speech);
        responsiveVoice.setDefaultVoice('Vietnamese Female');
        setTimeout(()=>{
          responsiveVoice.speak(text);
        appendMessage(textShow, 'Bot');
        }, 1500)
      }

      window.onload = function () {
        var speech = new SpeechRecognitionApi({
          output: document.querySelector('.output'),
        });

        $('#speech').on('click', () => {
          const classA = $('.pulse-ring').attr('class').split(' ');
          if(classA[1] && classA[1] === 'active') return speech.stop();
          speech.init();
          $('.pulse-ring').addClass('active');
        });
      };

      function appendMessage(message, who) {
        $('#content-message').append(`<div><b>${who}</b>: ${message}</div>`)
      }
    </script>
  </body>
</html>
